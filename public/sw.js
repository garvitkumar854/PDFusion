
/**
 * Don't edit this file.
 * This file is generated by next-pwa.
 */
importScripts(
  "https://storage.googleapis.com/workbox-cdn/releases/7.0.0/workbox-sw.js"
);

self.workbox.setConfig({
  debug: false,
});

self.workbox.precaching.precacheAndRoute(self.__WB_MANIFEST, {
  ignoreURLParametersMatching: [/.*/],
});

self.workbox.routing.registerRoute(
  ({ request }) => request.mode === "navigate",
  new self.workbox.strategies.NetworkFirst({
    cacheName: "pages",
    plugins: [
      new self.workbox.cacheableResponse.CacheableResponsePlugin({
        statuses: [200],
      }),
    ],
  })
);

self.workbox.routing.registerRoute(
  ({ request }) =>
    request.destination === "style" ||
    request.destination === "script" ||
    request.destination === "worker",
  new self.workbox.strategies.StaleWhileRevalidate({
    cacheName: "assets",
    plugins: [
      new self.workbox.cacheableResponse.CacheableResponsePlugin({
        statuses: [200],
      }),
    ],
  })
);

self.workbox.routing.registerRoute(
  ({ request }) => request.destination === "image",
  new self.workbox.strategies.CacheFirst({
    cacheName: "images",
    plugins: [
      new self.workbox.cacheableResponse.CacheableResponsePlugin({
        statuses: [200],
      }),
      new self.workbox.expiration.ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
      }),
    ],
  })
);

// Offline fallback
self.workbox.routing.setCatchHandler(({ event }) => {
  if (event.request.destination === 'document') {
    return self.workbox.precaching.matchPrecache('/_offline');
  }
  return Response.error();
});

self.addEventListener("message", (event) => {
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting();
  }
});

self.addEventListener('install', (event) => {
  event.waitUntil(
    self.clients.claim().then(() => {
      // After the service worker is activated, we can safely send messages to it.
      self.clients.matchAll().then(clients => {
        clients.forEach(client => client.postMessage({ type: 'new-version-installed' }));
      });
    })
  );
});
