
import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute, NavigationRoute } from 'workbox-routing';
import { NetworkFirst, StaleWhileRevalidate } from 'workbox-strategies';

// Injects the manifest of files to be cached. This is automatically generated by the build process.
precacheAndRoute(self.__WB_MANIFEST);

// Handle offline navigation fallbacks
const navigationRoute = new NavigationRoute(
  // Use a NetworkFirst strategy for navigation requests
  new NetworkFirst({
    cacheName: 'navigations',
    plugins: [
      {
        // Define a fallback to the offline page if a navigation request fails
        handlerDidError: async () => {
          const cache = await self.caches.open('offline-cache');
          return await cache.match('/_offline');
        },
      },
    ],
  }),
  {
    // Only apply this route to navigation requests
    allowlist: [/^\/$/],
  }
);

registerRoute(navigationRoute);

// Cache other static assets with a Stale-While-Revalidate strategy
registerRoute(
  ({ request }) =>
    request.destination === 'style' ||
    request.destination === 'script' ||
    request.destination === 'worker' ||
    request.destination === 'font' ||
    request.destination === 'image',
  new StaleWhileRevalidate({
    cacheName: 'static-resources',
  })
);

// Cache the offline page during the service worker's install phase
self.addEventListener('install', (event) => {
  event.waitUntil(
    (async () => {
      const cache = await self.caches.open('offline-cache');
      await cache.add('/_offline');
    })()
  );
});

// Activate new service worker as soon as it's installed
self.addEventListener('install', (event) => {
  event.waitUntil(self.skipWaiting());
});

self.addEventListener('activate', (event) => {
  event.waitUntil(self.clients.claim());
});
